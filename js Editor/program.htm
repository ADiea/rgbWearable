<!DOCTYPE html>
<html lang="en">
    <head>
        <title>RGB wearable program</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    </head>

    <body>
		
		<div id="prog" /> 
		
		<div id="palette" >
		
		</div>

		<div id="output" style="width:1024px" />
	
		<script src="dat.gui.min.js"></script>
        <script>
            init();
			
            function init() 
			{
				//canvas
				var progList = [];
				
				var mouseCursor = {x:0, y:0};
				var mouseClick = false;
				
				var div = document.createElement("div");
					//div.style.position= 'absolute';
					//div.style.display = 'block';
					//div.style.top='0px';
					//div.style.float='left';
				document.getElementById("prog").appendChild(div);
	
				var canvas =  document.createElement('canvas');
				canvas.width = canvas.height = 1024;
				
				div.appendChild(canvas);
	
				var ctx = canvas.getContext('2d');
				
				var gPalette = {
				palette0:"#000000", 
				palette1:"#ff0000",
				palette2:"#00ff00", 
				palette3:"#0000ff",
				palette4:"#00ffff", 
				palette5:"#6600ff",
				palette6:"#9900ff", 
				palette7:"#990066",
				palette8:"#99ff00", 
				palette9:"#99ffff",
				palette10:"#ffff00",
				palette11:"#ff6633", 
				palette12:"#ff00ff",
				palette13:"#ffcc33", 
				palette14:"#669933",
				palette15:"#ffffff",
			};

				var isInRect = function (pct, topleft, w, h)
				{
					if(pct.x < topleft.x) return false;
					if(pct.y < topleft.y) return false;
					if(pct.x > topleft.x + w) return false;
					if(pct.y > topleft.y + h) return false;
					
					return true;
				}
				
				var winToCanvas = function(x, y) 
				{
				   var box = canvas.getBoundingClientRect();
				   return { x: x - box.left * (canvas.width  / box.width),
							y: y - box.top  * (canvas.height / box.height)
						  };
				}
				

			
				var updateCanvas = function()
				{
					ctx.moveTo(0,0);
					
					//cleanup
					ctx.fillStyle = "#ddd";
					ctx.fillRect(0, 0, 1024, 1024);
					
					ctx.moveTo(0,255);
					var accum = 0;
					
					ctx.font = "14px Arial";
					
					for(var i=0; i< progList.length; i++)
					{
						var obj = JSON.parse(progList[i]);
						
						ctx.fillStyle = '#000';
						ctx.fillText(i+"", accum, 270); 
						
						var fill = gPalette['palette'+obj.color];
						if(i<progList.length-1 && obj.fadeIntoNext)
						{
							var nextobj = JSON.parse(progList[i+1]);
							fill=ctx.createLinearGradient(accum,0,accum + obj.finalDuration*10*prog.dispZoom,0);
							fill.addColorStop(0,gPalette['palette'+obj.color]);
							fill.addColorStop(1,gPalette['palette'+nextobj.color]);
						}
						else if(obj.fadeIntoNext)
						{
							var nextobj = JSON.parse(progList[0]);
							fill=ctx.createLinearGradient(accum,0,accum + obj.finalDuration*10*prog.dispZoom,0);
							fill.addColorStop(0,gPalette['palette'+obj.color]);
							fill.addColorStop(1,gPalette['palette'+nextobj.color]);
						}
						
						ctx.fillStyle = fill;
						
						ctx.fillRect(accum, 128, obj.finalDuration*10*prog.dispZoom, 128);
						
						if(isInRect(mouseCursor, {x:accum, y:128}, obj.finalDuration*10*prog.dispZoom, 128))
						{
							ctx.lineWidth=3;
							ctx.strokeStyle="#FFFFFF";
							ctx.strokeRect(accum, 128, obj.finalDuration*10*prog.dispZoom, 128);
							ctx.lineWidth=1;
							
							if(mouseClick)
							{
								mouseClick = false;
								prog.listIndex = i;
								prog.read();
							}
						}
						
						accum += obj.finalDuration*10*prog.dispZoom;

						ctx.fillStyle = '#000';
						ctx.fillText(parseInt(accum/(10*prog.dispZoom))+"", accum, 110); 
					}
				}

				var exportProgram = function()
				{
					var text="/*" + progList.length + " steps */ Command stepsProg_[] = {";
					for(var i=0; i< progList.length; i++)
					{
						var obj = JSON.parse(progList[i]);

						var drt = parseInt(obj.duration / 0.1) - 1;
						var duration = parseInt(obj.durationFactor*32 + (drt));
						text += "{";
						text += duration+"";
						text+=', 0, 0, 0, ';

						if(obj.fadeIntoNext)
							text += '1, ';
						else
							text += '0, ';
							
						
						text += obj.color ;
						
						text += "}";
						
						if(i<progList.length-1)
							text+=', ';
					}
					text += '};<br\>Palette pal0 = {{';
					
					for(var i=0; i<16; i++)
					{
						text += '{';
						
						text += parseInt(gPalette['palette'+i].substring(3,5), 16);
						text += ',';
						
						text += parseInt(gPalette['palette'+i].substring(1,3), 16);
						text += ',';
						
						text += parseInt(gPalette['palette'+i].substring(5,7), 16);
						
						text += '}';
						if(i < 15)
							text+=', ';
					}
					
					text += "}};";
					
					document.getElementById("output").innerHTML = text;
				}

				updateCanvas();
				
				var cbk_mousemove = function (e) 
				{
					mouseCursor = winToCanvas(e.clientX, e.clientY);
					updateCanvas();
				}

				var cbk_mouseup = function (e) 
				{
					mouseCursor = winToCanvas(e.clientX, e.clientY);
					mouseClick = true;
				}
				
				canvas.onmousemove = cbk_mousemove;
				canvas.onmouseup = cbk_mouseup;
				
				
				//palette menu
				var palDivs = [];
				
				for(var i=0; i<16;i++)
				{
					palDivs.push(document.createElement("div"));
						//div.style.position= 'absolute';
						//div.style.display = 'block';
						//div.style.top='0px';
						palDivs[i].style.display = 'inline-block';
						palDivs[i].style.border = 'solid gray 1px';
						palDivs[i].style.height = palDivs[i].style.width ='48px';
						palDivs[i].style.backgroundColor = gPalette['palette'+i];
						palDivs[i].customColIdx = i;
						palDivs[i].onmouseup = function() {prog.color = this.customColIdx;}
						
					document.getElementById("palette").appendChild(palDivs[i]);
					
				}
				
				//gui
				
				var guiPal = new dat.GUI();
				
				var prog = {
					duration:0.1,
					durationFactor:0,
					finalDuration:0.1,
					color:0,
					fadeIntoNext:false,
					listIndex:0,
					listSize:0,
					dispZoom:1,
					read:function() 
					{
						var obj = JSON.parse(progList[this.listIndex]);
						
						this.duration = obj.duration;
						this.durationFactor = obj.durationFactor;
						this.finalDuration = this.duration * Math.pow(2, prog.durationFactor);
						this.color = obj.color;
						this.fadeIntoNext = obj.fadeIntoNext;
					},
					write:function()
					{
						if(this.listIndex >= progList.length)
						{
							progList.push(JSON.stringify(this));
						}
						else
						{
							progList[this.listIndex] = JSON.stringify(this);
						}
						
						updateCanvas();
						
						this.listSize = progList.length;
						this.listIndex = this.listSize;
					},
					exportProgram:function()
					{
						exportProgram ();
					}
				};
				
				guiPal.addColor(gPalette, 'palette0')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette1')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette2')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette3')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette4')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette5')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette6')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette7')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette8')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette9')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette10')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette11')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette12')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette13')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette14')/*.onFinishChange( function(colorValue  ) {		})*/;
				guiPal.addColor(gPalette, 'palette15')/*.onFinishChange( function(colorValue  ) {		})*/;
				
				var guiProg = new dat.GUI();
				
				guiProg.add(prog, 'duration', 0.1, 3.2).step(0.1).onChange( function(d) 
					{
					prog.finalDuration = d * Math.pow(2, prog.durationFactor);
					}).listen();

				guiProg.add(prog, 'durationFactor', 0, 7).step(1).onChange( function(d) 
					{
					prog.finalDuration = prog.duration * Math.pow(2, d);
					}).listen();
				
				guiProg.add(prog, 'finalDuration').listen();
				
				guiProg.add(prog, 'color', 0, 15).step(1).listen();
				
				guiProg.add(prog, 'fadeIntoNext').listen();

				guiProg.add(prog, 'listIndex', 0, 16).step(1).listen();
				guiProg.add(prog, 'listSize').listen();

				guiProg.add(prog, 'read');
				guiProg.add(prog, 'write');
				guiProg.add(prog, 'exportProgram');
				
				guiProg.add(prog, 'dispZoom', 0.2, 5.0).step(0.1).listen().onChange(function(){updateCanvas();});
				
            }
        </script>
    </body>
</html>